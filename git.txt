Конфигурирование и настройка: git config
Первое, что следует сделать после установки Git — указать имя и адрес электронной почты. 
Каждый коммит в Git содержит эту информацию, и она включена в коммиты, передаваемые вами:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
Если указана опция --global, то эти настройки достаточно сделать только один раз, 
поскольку в этом случае Git будет использовать эти данные для всего, что вы делаете в этой системе. 
Если для каких-то отдельных проектов вы хотите указать другое имя или электронную почту, 
можно выполнить эту же команду без параметра --global в каталоге с нужным проектом.

Для создания нового репозитория используется команда git init. 
Команду git init выполняют только один раз для первоначальной настройки нового репозитория. 
Выполнение команды приведет к созданию нового подкаталога .git в вашем рабочем каталоге. 
Кроме того, будет создана новая главная ветка.

Помимо этого, мы можем узнать, что Git думает о нашей папке и её содержимом, а также
статус происходящего. Соответственно, для этого пишется команда git status. 

Если вы хотите добавить под версионный контроль созданный файл, 
вам стоит добавить его в индекс и осуществить первый коммит изменений. 
Добиться этого вы сможете запустив команду git add, указав название индексируемых файлов с расширением.
Для быстрого поиска нужного файла можно ввести в коммандную строку первые буквы названия и нажать клавишу tab:
git add readme.txt 

Для фиксации состояния файла вызываем команду commit (с англ. фиксация, зафиксировать). 
Мы хотим сохранить наше текущее состояние, зафиксировать наше текущее состояние. 
И далее можем указать некоторое сопроводительное сообщение. 
Вот идёт -m и мы указываем комментарий, который необходимо к этому
сохранению добавить. Чтобы в дальнейшем мы, открыв список всех наших сохранений,
смогли понять, что же было в том или ином сохранении:
git commit -m "Комментарий к коммиту"

Когда у нас есть несколько зафиксированных состояний, мы можем между ними
переключаться. Более того, можно посмотреть разницу между текущим и зафиксированным
состоянием файла. Например, мы сделали commit. После внесли какие-то изменения, и можем
с помощью команды git diff (от difference — разница) посмотреть, а чем же отличается файл,
отредактированный сейчас, от файла, сохранённого с помощью git commit. Команда git diff
может показать разницу очень наглядно. Если мы строки удалили, то в отображении увидим
их красного цвета с минусами. А если добавили, они будут зеленого цвета и с плюсами. Таким
образом, можно посмотреть, что же мы сделали файлом относительно предыдущего
сохранения (commit).

Команда git log позволяет вывести список всех имеющихся коммитов, которые мы сделали в
этой ветке. Здесь указано время, дата совершения коммита, кто коммит сделал и сопроводительный текст. 
После слова commit указан набор букв и символов. Это так называемый хэш
код. Если вы захотите переключиться с одного коммита на другой, то в Git необходимо будет
указывать именно этот набор символов. Не обязательно копировать всю стройку, достаточно первые 4,5,6 символов,
чтобы Git смог понять, какой коммит имеется в виду.

Команда git checkout позволяет переходить между разными коммитами либо ветками.
Здесь указывается ветка либо номер коммита, на который будем переключаться. 
git checkout 4символа_хэш_кода_коммита
git checout branch_name

Команда git branch выводит на экран список имеющихся у нас веток. 
Звездочкой отмечена ветка, в которой мы находимся в данный момент.
git checkout master - возвращение в ветку master

Создать новую ветку можно командой git branch.
Делать это надо в папке с репозиторием: 
git branch new_branch_name
git checkout new_branch_name - переключение на новую ветку

Rоманда clear очищает поле терминала от ранее введённых команд.

Чтобы слить любую ветку с текущей, вызываем:
git merge <имя ветки для слияния с текущей>, например возвращаемся в ветку master и добавляем изменения из ветки new_branch_name:
git checkout master 
git merge new_branch_name

Если ветка new_branch_name больше не нужна, ее можно удалить:
git branch -d new_branch_name

Ключ --graf в связке с командой log позволяет отобразить коммиты в виде дерева.
git log --graph